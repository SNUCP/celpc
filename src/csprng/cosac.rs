use crate::{parameters::Parameters, ring::Poly};

use super::UniformSampler;
use core::f64;

/// GaussianSampler samples values from Discrete Gaussian Distribution.
#[derive(Clone)]
pub struct COSACSampler {
    base_sampler: UniformSampler,
}

impl COSACSampler {
    /// Creates a new Gaussian sampler.
    pub fn new(params: &Parameters) -> COSACSampler {
        COSACSampler {
            base_sampler: UniformSampler::new(params),
        }
    }

    /// Creates a new Gaussian sampler with seed.
    pub fn new_with_seed(params: &Parameters, seed: &[u8]) -> COSACSampler {
        COSACSampler {
            base_sampler: UniformSampler::new_with_seed(params, seed),
        }
    }

    /// read_uniform_f64 samples uniformly random f64 in [0, 1).
    fn read_uniform_f64(&mut self) -> f64 {
        let mut u = self.base_sampler.read_u64() & ((1 << 52) - 1);
        u += 1 << 52;
        let uf = (u as f64) / f64::exp2(52.0);
        return uf - 1.0;
    }

    /// read_norm_f64 samples random f64 from standard normal distribution.
    fn read_normal_f64(&mut self) -> f64 {
        loop {
            let h = self.base_sampler.read_u64();
            let t = h & 1;
            let i = ((h >> 1) & 127) as usize;
            let u = h >> 8;

            let mut x = (u as f64) * W[i];
            if t > 0 {
                x = -x;
            }

            if u < K[i] {
                return x;
            }

            if i == 0 {
                loop {
                    x = -RN_INV * f64::ln(self.read_uniform_f64());
                    let y = -f64::ln(self.read_uniform_f64());
                    if y + y >= x * x {
                        break;
                    }
                }
                x += RN;

                if t > 0 {
                    return -x;
                }
                return x;
            }

            let r = self.read_uniform_f64();
            if F[i] + r * (F[i - 1] - F[i]) < f64::exp(-0.5 * x * x) {
                return x;
            }
        }
    }

    /// read_round_f64 samples random f64 from rounded normal distribution.
    fn read_round_f64(&mut self, c_frac: f64, std_dev: f64) -> i64 {
        loop {
            let y = std_dev * self.read_normal_f64();
            let b = self.base_sampler.read_u64() & 1;

            let y_round;
            let cmp;
            if b == 0 {
                y_round = f64::round(y) - 1.0;
                cmp = y_round <= 0.5;
            } else {
                y_round = f64::round(y) + 1.0;
                cmp = y_round >= -0.5;
            }

            if cmp {
                let r = self.read_uniform_f64();
                if r < f64::exp(
                    -((y_round + c_frac) * (y_round + c_frac) - y * y) / (2.0 * std_dev * std_dev),
                ) {
                    return y_round as i64;
                }
            }
        }
    }

    /// read_f64 samples random f64 from Discrete Gaussian Distribution.
    pub fn read_i64(&mut self, center: f64, std_dev: f64) -> i64 {
        let c_int = f64::round(center);
        let c_frac = c_int - center;

        let norm = f64::sqrt(2.0 * f64::consts::PI) * std_dev;
        let r = self.read_uniform_f64();
        if r < f64::exp(-(c_frac * c_frac) / (2.0 * std_dev * std_dev)) / norm {
            return c_int as i64;
        }
        return c_int as i64 + self.read_round_f64(c_frac, std_dev);
    }

    /// read_coset_f64 samples random f64 from Discrete Gaussian Distribution over a coset.
    pub fn read_coset_f64(&mut self, coset: f64, std_dev: f64) -> f64 {
        return coset + self.read_i64(-coset, std_dev) as f64;
    }

    /// read_poly_assign samples random f64 from Discrete Gaussian Distribution and assigns to p_out.
    pub fn read_poly_assign(&mut self, center: f64, std_dev: f64, p_out: &mut Poly) {
        for i in 0..self.base_sampler.params.ringq().degree() {
            let c = self.read_i64(center, std_dev);
            if c >= 0 {
                for j in 0..self.base_sampler.params.ringq().level() {
                    p_out.coeffs[j][i] = c as u64;
                }
            } else {
                for j in 0..self.base_sampler.params.ringq().level() {
                    p_out.coeffs[j][i] =
                        (c + self.base_sampler.params.ringq().modulus_idx(j) as i64) as u64;
                }
            }
        }

        self.base_sampler.params.ringq().ntt_inplace(p_out);
    }
}

const RN: f64 = 3.442619855899;
const RN_INV: f64 = 1.0 / RN;

const K: [u64; 128] = [
    0xed5a442469e0b0,
    0x0,
    0xc01e36a7c9d510,
    0xd9c88f4dc02808,
    0xe4b68d441e9728,
    0xeac00a3a172980,
    0xee9243d6e5a6b0,
    0xf1344b7afdf9f8,
    0xf3208b87a86540,
    0xf4979cba361108,
    0xf5bec53e66cf60,
    0xf6ad054c5e3e48,
    0xf771518c35a898,
    0xf815ce44639a78,
    0xf8a199cebebc38,
    0xf919d8b6bb26c0,
    0xf98259adaeac80,
    0xf9ddfda5b3eb00,
    0xfa2efc16692dc0,
    0xfa7711061821e8,
    0xfab79cd9582848,
    0xfaf1bac8fb6678,
    0xfb26510c6dd908,
    0xfb561cafbc5ea8,
    0xfb81ba60a28d50,
    0xfba9ad1171e9e8,
    0xfbce630a835920,
    0xfbf039d4a47f00,
    0xfc0f8147e156f0,
    0xfc2c7df4cfc568,
    0xfc476b0fc73bb8,
    0xfc607bfb0f1b68,
    0xfc77dd85a809e8,
    0xfc8db6eefc2138,
    0xfca22abbda4fa0,
    0xfcb557663f2f38,
    0xfcc757ef4739d8,
    0xfcd8445907fb28,
    0xfce8320cd35318,
    0xfcf73431770da8,
    0xfd055bf4514c10,
    0xfd12b8c781d998,
    0xfd1f58970f8bb8,
    0xfd2b47f67fcdb8,
    0xfd36924817f1a0,
    0xfd4141dec7a268,
    0xfd4b601b8ec0d0,
    0xfd54f5870c9a88,
    0xfd5e09e7c8fc78,
    0xfd66a455afa708,
    0xfd6ecb4b231170,
    0xfd7684b3fb4928,
    0xfd7dd5fab87210,
    0xfd84c4142561e8,
    0xfd8b53899da7a8,
    0xfd91888222a2a0,
    0xfd9766ca64dd10,
    0xfd9cf1dbe172a8,
    0xfda22ce32eb2a8,
    0xfda71ac58f4678,
    0xfdabbe25dfd1c0,
    0xfdb01968f02180,
    0xfdb42eb9568b18,
    0xfdb8000ac9f3d8,
    0xfdbb8f1d0d1b20,
    0xfdbedd7e7419a8,
    0xfdc1ec8e0b8cd0,
    0xfdc4bd7d6794e0,
    0xfdc751521f93d0,
    0xfdc9a8e6fa7cc0,
    0xfdcbc4ecce7648,
    0xfdcda5eb158cc0,
    0xfdcf4c40383558,
    0xfdd0b8218d62c0,
    0xfdd1e99b0ee8d8,
    0xfdd2e08ebfdd20,
    0xfdd39cb3c17e40,
    0xfdd41d9511f470,
    0xfdd4628feedce8,
    0xfdd46ad1d40e58,
    0xfdd435560d4608,
    0xfdd3c0e2cf6e30,
    0xfdd30c05cbdb00,
    0xfdd215102d2460,
    0xfdd0da11ea0838,
    0xfdcf58d456f060,
    0xfdcd8ed3da1fe0,
    0xfdcb7938a10748,
    0xfdc914ce2e8ef8,
    0xfdc65df99201a0,
    0xfdc350ae0c4378,
    0xfdbfe85fdcb9a8,
    0xfdbc1ff4e00680,
    0xfdb7f1b297c5a0,
    0xfdb357291aa6d8,
    0xfdae491a4e42c0,
    0xfda8bf5ca5eac0,
    0xfda2b0b87100c8,
    0xfd9c12be84aff8,
    0xfd94d996bb8818,
    0xfd8cf7c45b2048,
    0xfd845ddde39de0,
    0xfd7afa35124800,
    0xfd70b86ae56e20,
    0xfd6580ea1b37c0,
    0xfd593840d136e0,
    0xfd4bbe4f609eb0,
    0xfd3ced3f002530,
    0xfd2c982d9ab910,
    0xfd1a8974e5ca90,
    0xfd068067ddb668,
    0xfcf02e5177ee18,
    0xfcd7326658fb20,
    0xfcbb14343e0838,
    0xfc9b3bdb13f3b0,
    0xfc76e6f466f098,
    0xfc4d185e553dd8,
    0xfc1c7fea760750,
    0xfbe354bbf182f8,
    0xfb9f18e44c4ae8,
    0xfb4c343c9e2980,
    0xfae541f79370f8,
    0xfa61c12ef4f9c0,
    0xf9b36957d77240,
    0xf8c01e3503c0d8,
    0xf75217b8677560,
    0xf4e442ecd33358,
    0xefacc9cb3e9530,
];

const W: [f64; 128] = [
    5.152942304440731e-17,
    3.779211177528546e-18,
    5.035852722282456e-18,
    5.919542444491012e-18,
    6.625780997425229e-18,
    7.22555402679703e-18,
    7.753411501834355e-18,
    8.229013893515998e-18,
    8.664716129814332e-18,
    9.068837885372773e-18,
    9.447275165901818e-18,
    9.804374136660376e-18,
    1.0143440402100663e-17,
    1.0467053119440254e-17,
    1.0777267798949793e-17,
    1.1075752268719575e-17,
    1.1363880762787421e-17,
    1.1642800810917828e-17,
    1.1913481912009956e-17,
    1.2176751677985282e-17,
    1.2433323156881493e-17,
    1.2683815817413481e-17,
    1.292877189494818e-17,
    1.3168669287123899e-17,
    1.3403931845028907e-17,
    1.3634937672194296e-17,
    1.3862025881230826e-17,
    1.408550214314808e-17,
    1.4305643282033675e-17,
    1.4522701107855853e-17,
    1.473690563600947e-17,
    1.494846780931833e-17,
    1.5157581813408594e-17,
    1.5364427057490897e-17,
    1.556916987808439e-17,
    1.577196501197308e-17,
    1.5972956875899087e-17,
    1.617228068357889e-17,
    1.637006342514162e-17,
    1.6566424729707146e-17,
    1.6761477628301332e-17,
    1.695532923146053e-17,
    1.7148081333564516e-17,
    1.7339830954047724e-17,
    1.753067082408716e-17,
    1.7720689826086138e-17,
    1.7909973392213282e-17,
    1.8098603867375498e-17,
    1.8286660841268696e-17,
    1.8474221453535314e-17,
    1.8661360675541837e-17,
    1.8848151571856137e-17,
    1.9034665544139547e-17,
    1.9220972559861485e-17,
    1.9407141367985893e-17,
    1.9593239703561655e-17,
    1.9779334482967476e-17,
    1.9965491991410554e-17,
    2.0151778064153915e-17,
    2.033825826284628e-17,
    2.052499804824809e-17,
    2.071206295058628e-17,
    2.0899518738726243e-17,
    2.1087431589321968e-17,
    2.127586825709298e-17,
    2.146489624737944e-17,
    2.1654583992144607e-17,
    2.1845001030626488e-17,
    2.203621819588908e-17,
    2.2228307808588562e-17,
    2.2421343879352476e-17,
    2.2615402321272053e-17,
    2.2810561174131224e-17,
    2.3006900842143298e-17,
    2.3204504347140732e-17,
    2.3403457599368684e-17,
    2.360384968827396e-17,
    2.3805773195962715e-17,
    2.4009324536330014e-17,
    2.421460432324996e-17,
    2.4421717771666483e-17,
    2.4630775135954092e-17,
    2.4841892190539372e-17,
    2.5055190758505434e-17,
    2.5270799294764908e-17,
    2.5488853531408587e-17,
    2.5709497194049842e-17,
    2.5932882799429963e-17,
    2.6159172546277296e-17,
    2.6388539313487046e-17,
    2.6621167782188563e-17,
    2.6857255701293365e-17,
    2.7097015319798532e-17,
    2.7340675013619677e-17,
    2.7588481140256304e-17,
    2.7840700161422706e-17,
    2.809762108226512e-17,
    2.835955826639796e-17,
    2.8626854699347176e-17,
    2.889988578991277e-17,
    2.917906382056743e-17,
    2.946484318580545e-17,
    2.9757726593421176e-17,
    3.0058272450907446e-17,
    3.0367103721563165e-17,
    3.068491861822208e-17,
    3.101250361502133e-17,
    3.1350749411368486e-17,
    3.170067069509885e-17,
    3.206343085064238e-17,
    3.2440373184106596e-17,
    3.283306085507585e-17,
    3.324332861780275e-17,
    3.3673350851217557e-17,
    3.412573248168003e-17,
    3.460363276607498e-17,
    3.511093738513032e-17,
    3.565250353172647e-17,
    3.623451883582939e-17,
    3.686504450680305e-17,
    3.75548699516312e-17,
    3.831892265142546e-17,
    3.9178734569779584e-17,
    4.0167091972264215e-17,
    4.1337714538177976e-17,
    4.2788395857263743e-17,
    4.472928950257001e-17,
    4.777594786313511e-17,
];

const F: [f64; 128] = [
    1.0,
    0.9635996931270896,
    0.9362826816850625,
    0.9130436479717428,
    0.8922816507840284,
    0.8732430489100717,
    0.8555006078694526,
    0.8387836052959915,
    0.8229072113814108,
    0.8077382946829622,
    0.7931770117713067,
    0.7791460859296893,
    0.765584173897706,
    0.7524415591746129,
    0.7396772436726488,
    0.7272569183441863,
    0.7151515074105,
    0.7033360990161595,
    0.6917891434366764,
    0.6804918409973354,
    0.6694276673488917,
    0.6585820000500895,
    0.647941821110224,
    0.6374954773350439,
    0.6272324852499288,
    0.6171433708188824,
    0.6072195366251217,
    0.5974531509445181,
    0.5878370544347078,
    0.5783646811197644,
    0.569029991067952,
    0.5598274127040879,
    0.5507517931146054,
    0.5417983550254263,
    0.5329626593838369,
    0.5242405726729849,
    0.5156282382440026,
    0.5071220510755696,
    0.49871863547098017,
    0.4904148252838448,
    0.4822076463294858,
    0.47409430069301745,
    0.4660721526894566,
    0.4581387162678725,
    0.4502916436820397,
    0.44252871527546894,
    0.4348478302499913,
    0.42724699830499646,
    0.41972433204957477,
    0.4122780401026614,
    0.40490642080722333,
    0.39760785649387365,
    0.39038080823731486,
    0.38322381105590136,
    0.3761354695105628,
    0.36911445366447243,
    0.3621594953693178,
    0.35526938484791737,
    0.3484429675463268,
    0.3416791412315506,
    0.33497685331358923,
    0.3283350983728503,
    0.3217529158759849,
    0.31522938806501094,
    0.3087636380061812,
    0.30235482778648354,
    0.296002156846933,
    0.28970486044295984,
    0.283462208223233,
    0.2772735029191881,
    0.2711380791383846,
    0.2650553022555892,
    0.25902456739620483,
    0.25304529850732577,
    0.2471169475123214,
    0.24123899354543982,
    0.23541094226347908,
    0.22963232523211613,
    0.22390269938500842,
    0.21822164655430543,
    0.21258877307173027,
    0.2070037094399266,
    0.20146611007431373,
    0.1959756531162778,
    0.19053204031913723,
    0.18513499700899227,
    0.17978427212329554,
    0.17447963833078958,
    0.169220892237365,
    0.16400785468342038,
    0.1588403711394793,
    0.15371831220818166,
    0.14864157424234226,
    0.14361008009062776,
    0.1386237799845946,
    0.13368265258343937,
    0.1287867061959432,
    0.12393598020286782,
    0.11913054670765083,
    0.11437051244886601,
    0.10965602101484027,
    0.10498725540942132,
    0.10036444102865587,
    0.09578784912173144,
    0.09125780082683026,
    0.08677467189478019,
    0.08233889824223567,
    0.0779509825139734,
    0.0736115018841134,
    0.06932111739357791,
    0.06508058521306807,
    0.060890770348040406,
    0.05675266348104985,
    0.052667401903051005,
    0.048636295859867805,
    0.044660862200491425,
    0.040742868074444175,
    0.0368843887866562,
    0.03308788614622575,
    0.02935631744000685,
    0.02569329193593427,
    0.022103304615927098,
    0.018592102737011288,
    0.015167298010546568,
    0.011839478657884862,
    0.008624484412859885,
    0.005548995220771345,
    0.002669629083880923,
];
